import axios from "axios";
import fs from "fs";
import path from "path";

/**
 * Theo d√µi t√†i kho·∫£n TikTok v√† g·ª≠i video m·ªõi nh·∫•t l√™n k√™nh Discord.
 * Ki·ªÉm tra m·ªói 24h.
 * @param {Client} client - Discord client
 * @param {string} username - T√™n t√†i kho·∫£n TikTok (v√≠ d·ª•: 'tiktokvn')
 * @param {string} channelId - ID k√™nh Discord ƒë·ªÉ ƒëƒÉng
 */
export async function startTikTokWatcher(client, username, channelId) {
  const cacheFile = path.join(process.cwd(), "tiktokCache.json");

  // ƒê·ªçc cache (n·∫øu c√≥)
  let cache = {};
  if (fs.existsSync(cacheFile)) {
    cache = JSON.parse(fs.readFileSync(cacheFile, "utf8"));
  }

  async function checkLatestVideo() {
    try {
      console.log(`[TikTok] ƒêang ki·ªÉm tra video m·ªõi c·ªßa ${username}...`);
      const url = `https://www.tikwm.com/api/user/posts/${username}`;
      const res = await axios.get(url);
      const data = res.data?.data;

      if (!data || !data.videos || data.videos.length === 0) {
        console.log(`[TikTok] Kh√¥ng t√¨m th·∫•y video n√†o cho ${username}.`);
        return;
      }

      const latest = data.videos[0];
      const latestId = latest.video_id;

      if (cache[username] === latestId) {
        console.log(`[TikTok] Kh√¥ng c√≥ video m·ªõi.`);
        return;
      }

      // C·∫≠p nh·∫≠t cache
      cache[username] = latestId;
      fs.writeFileSync(cacheFile, JSON.stringify(cache, null, 2));

      // G·ª≠i v√†o Discord
      const channel = await client.channels.fetch(channelId);
      if (channel) {
        const videoUrl = `https://www.tiktok.com/@${username}/video/${latestId}`;
        await channel.send({
          content: `üìπ Video m·ªõi t·ª´ **@${username}**:\n${videoUrl}`,
        });
        console.log(`[TikTok] ƒê√£ ƒëƒÉng video m·ªõi: ${videoUrl}`);
      }
    } catch (err) {
      console.error(`[TikTok] L·ªói khi ki·ªÉm tra: ${err.message}`);
    }
  }

  // G·ªçi ngay 1 l·∫ßn khi bot kh·ªüi ƒë·ªông
  await checkLatestVideo();

  // L·∫∑p l·∫°i m·ªói 24 gi·ªù
  setInterval(checkLatestVideo, 24 * 60 * 60 * 1000);
}
