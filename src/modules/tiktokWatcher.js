import axios from "axios";

/**
 * Theo d√µi t√†i kho·∫£n TikTok v√† g·ª≠i video m·ªõi nh·∫•t l√™n k√™nh Discord.
 * @param {Client} client - Discord client
 * @param {string} username - TikTok username
 * @param {string} channelId - ID k√™nh Discord
 * @param {number} intervalMinutes - Ki·ªÉm tra m·ªói X ph√∫t
 * @param {string} [uid] - UID TikTok (n·∫øu ƒë√£ bi·∫øt)
 */
export async function startTikTokWatcher(client, username, channelId, intervalMinutes = 10, uid = null) {
  const cache = {};

  async function checkLatestVideo() {
    try {
      console.log(`[TikTokWatcher] Ki·ªÉm tra video m·ªõi c·ªßa ${username}...`);

      let apiUrl;
      if (uid) {
        apiUrl = `https://www.tikwm.com/api/user/posts/${username}`; // D√πng username v·∫´n OK, UID s·∫Ω d√πng n·∫øu API kh√°c
      } else {
        apiUrl = `https://www.tikwm.com/api/user/posts/${username}`;
      }

      const res = await axios.get(apiUrl);
      const data = res.data?.data;

      if (!data?.videos || data.videos.length === 0) {
        console.log(`[TikTokWatcher] Kh√¥ng t√¨m th·∫•y video n√†o cho ${username}.`);
        return;
      }

      const latest = data.videos[0];
      const latestId = latest.video_id;

      if (cache[username] === latestId) {
        console.log(`[TikTokWatcher] Kh√¥ng c√≥ video m·ªõi.`);
        return;
      }

      // C·∫≠p nh·∫≠t cache
      cache[username] = latestId;

      // G·ª≠i video l√™n Discord
      const channel = await client.channels.fetch(channelId);
      if (channel) {
        const videoUrl = `https://www.tiktok.com/@${username}/video/${latestId}`;
        await channel.send({
          content: `üìπ Video m·ªõi t·ª´ **@${username}**:\n${videoUrl}`,
        });
        console.log(`[TikTokWatcher] ƒê√£ g·ª≠i video: ${videoUrl}`);
      }
    } catch (err) {
      console.error(`[TikTokWatcher] L·ªói khi ki·ªÉm tra: ${err.message}`);
    }
  }

  // H√†m test g·ª≠i ngay video g·∫ßn nh·∫•t, b·ªè qua cache
  async function testSendLatestVideo() {
    try {
      console.log(`[TikTokWatcher][Test] L·∫•y video g·∫ßn nh·∫•t c·ªßa ${username}...`);

      const res = await axios.get(`https://www.tikwm.com/api/user/posts/${username}`);
      const data = res.data?.data;

      if (!data?.videos || data.videos.length === 0) {
        console.log(`[TikTokWatcher][Test] Kh√¥ng t√¨m th·∫•y video n√†o.`);
        return;
      }

      const latest = data.videos[0];
      const videoUrl = `https://www.tiktok.com/@${username}/video/${latest.video_id}`;

      const channel = await client.channels.fetch(channelId);
      if (channel) {
        await channel.send({
          content: `üìπ [Test] Video g·∫ßn nh·∫•t c·ªßa **@${username}**:\n${videoUrl}`,
        });
        console.log(`[TikTokWatcher][Test] ƒê√£ g·ª≠i video g·∫ßn nh·∫•t: ${videoUrl}`);
      }
    } catch (err) {
      console.error(`[TikTokWatcher][Test] L·ªói khi g·ª≠i video: ${err.message}`);
    }
  }

  // G·ªçi ngay 1 l·∫ßn
  await checkLatestVideo();

  // L·∫∑p theo intervalMinutes
  setInterval(checkLatestVideo, intervalMinutes * 60 * 1000);

  // N·∫øu c·∫ßn test g·ª≠i video g·∫ßn nh·∫•t, g·ªçi testSendLatestVideo()
  // await testSendLatestVideo();
}
