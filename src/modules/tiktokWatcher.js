// modules/tiktokWatcher.js
import axios from "axios";
import fs from "fs";
import path from "path";

/**
 * Theo d√µi video m·ªõi t·ª´ TikTok v√† g·ª≠i v√†o Discord.
 * @param {Client} client - Discord client
 * @param {string} username - TikTok username (vd: 'docdoan.vanco')
 * @param {string} channelId - Discord channel ID ƒë·ªÉ ƒëƒÉng video
 * @param {number} intervalMinutes - Kho·∫£ng th·ªùi gian check (ph√∫t)
 * @param {string} [uid] - TikTok UID n·∫øu c√≥ s·∫µn
 */
export async function startTikTokWatcher(client, username, channelId, intervalMinutes = 5, uid = null) {
  const cacheFile = path.join(process.cwd(), "tiktokCache.json");

  // ƒê·ªçc cache
  let cache = {};
  if (fs.existsSync(cacheFile)) {
    cache = JSON.parse(fs.readFileSync(cacheFile, "utf8"));
  }

  async function checkLatestVideo() {
    try {
      console.log(`[TikTokWatcher] Ki·ªÉm tra video m·ªõi c·ªßa ${username}...`);

      // --- TikAPI endpoint ---
      // B·∫°n c·∫ßn t·∫°o API key tr√™n https://rapidapi.com/tikapi-tikapi-default/api/tikapi1
      const TIKAPI_KEY = process.env.TIKAPI_KEY;
      if (!TIKAPI_KEY) {
        console.error("[TikTokWatcher] ‚ùå Ch∆∞a c√≥ TikAPI_KEY trong .env");
        return;
      }

      // N·∫øu c√≥ UID th√¨ ∆∞u ti√™n d√πng, kh√¥ng th√¨ d√πng username
      const params = uid ? { user_id: uid } : { username };
      const res = await axios.get("https://api.tikapi.io/v1/user/videos", {
        headers: {
          "x-rapidapi-key": TIKAPI_KEY,
          "x-rapidapi-host": "tikapi.io"
        },
        params: {
          ...params,
          count: 1 // ch·ªâ l·∫•y video m·ªõi nh·∫•t
        }
      });

      const videos = res.data?.data;
      if (!videos || videos.length === 0) {
        console.log(`[TikTokWatcher] Kh√¥ng t√¨m th·∫•y video n√†o cho ${username}.`);
        return;
      }

      const latest = videos[0];
      const latestId = latest.id;

      if (cache[username] === latestId) {
        console.log(`[TikTokWatcher] Kh√¥ng c√≥ video m·ªõi.`);
        return;
      }

      // C·∫≠p nh·∫≠t cache
      cache[username] = latestId;
      fs.writeFileSync(cacheFile, JSON.stringify(cache, null, 2));

      // G·ª≠i v√†o Discord
      const channel = await client.channels.fetch(channelId);
      if (channel) {
        const videoUrl = latest.webVideoUrl || `https://www.tiktok.com/@${username}/video/${latestId}`;
        await channel.send({
          content: `üìπ Video m·ªõi t·ª´ **@${username}**:\n${videoUrl}`
        });
        console.log(`[TikTokWatcher] ƒê√£ ƒëƒÉng video m·ªõi: ${videoUrl}`);
      }
    } catch (err) {
      console.error(`[TikTokWatcher] L·ªói khi ki·ªÉm tra: ${err.message}`);
    }
  }

  // Check ngay khi bot kh·ªüi ƒë·ªông
  await checkLatestVideo();

  // L·∫∑p theo interval
  setInterval(checkLatestVideo, intervalMinutes * 60 * 1000);

  console.log(`[TikTokWatcher] B·∫Øt ƒë·∫ßu theo d√µi t√†i kho·∫£n ${username} (every ${intervalMinutes}m)...`);
}
