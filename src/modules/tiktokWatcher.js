import puppeteer from "puppeteer";

/**
 * Theo d√µi TikTok b·∫±ng UID v√† g·ª≠i video m·ªõi l√™n Discord.
 * @param {import('discord.js').Client} client - Discord client
 * @param {string} username - T√™n ng∆∞·ªùi d√πng TikTok (d√πng ƒë·ªÉ log)
 * @param {string} channelId - ID k√™nh Discord
 * @param {number} intervalMinutes - kho·∫£ng th·ªùi gian ki·ªÉm tra (ph√∫t)
 * @param {string} uid - UID TikTok ng∆∞·ªùi d√πng
 */
export async function startTikTokWatcher(client, username, channelId, intervalMinutes = 3, uid) {
  if (!uid) {
    console.error("[TikTokWatcher] üö´ Ch∆∞a cung c·∫•p UID, kh√¥ng th·ªÉ theo d√µi.");
    return;
  }

  console.log(`[TikTokWatcher] B·∫Øt ƒë·∫ßu theo d√µi t√†i kho·∫£n UID=${uid} (every ${intervalMinutes}m)...`);

  const cache = { latestVideoId: null };

  async function checkLatestVideo() {
    try {
      console.log(`[TikTokWatcher] Ki·ªÉm tra video m·ªõi c·ªßa UID=${uid}...`);

      const browser = await puppeteer.launch({ headless: true });
      const page = await browser.newPage();
      await page.goto(`https://www.tiktok.com/@${username}`, { waitUntil: "networkidle2" });

      // L·∫•y d·ªØ li·ªáu __NEXT_DATA__ t·ª´ script tr√™n trang
      const nextData = await page.$eval("script[id='__NEXT_DATA__']", el => JSON.parse(el.innerText));
      await browser.close();

      const videos = nextData?.props?.pageProps?.userInfo?.user?.videos;
      if (!videos || videos.length === 0) {
        console.log(`[TikTokWatcher] ‚ùå Kh√¥ng t√¨m th·∫•y video n√†o cho UID=${uid}.`);
        return;
      }

      const latest = videos[0];
      const latestId = latest.id;

      if (cache.latestVideoId === latestId) {
        console.log(`[TikTokWatcher] Kh√¥ng c√≥ video m·ªõi.`);
        return;
      }

      cache.latestVideoId = latestId;

      const channel = await client.channels.fetch(channelId);
      if (channel) {
        const videoUrl = `https://www.tiktok.com/@${username}/video/${latestId}`;
        await channel.send({
          content: `üìπ Video m·ªõi t·ª´ **@${username}**:\n${videoUrl}`
        });
        console.log(`[TikTokWatcher] ‚úÖ ƒê√£ g·ª≠i video m·ªõi: ${videoUrl}`);
      }
    } catch (err) {
      console.error(`[TikTokWatcher] L·ªói khi ki·ªÉm tra: ${err.message}`);
    }
  }

  // Ch·∫°y ngay l·∫ßn ƒë·∫ßu
  await checkLatestVideo();

  // L·∫∑p l·∫°i theo interval
  setInterval(checkLatestVideo, intervalMinutes * 60 * 1000);
}
