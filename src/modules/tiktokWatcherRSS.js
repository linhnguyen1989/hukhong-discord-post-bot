// modules/tiktokWatcherRSS.js
import fs from "fs";
import Parser from "rss-parser";

/**
 * startTikTokWatcherRSS - Theo d√µi TikTok qua RSSHub
 * @param {Client} client - instance c·ªßa Discord.js Client
 * @param {string} username - username TikTok c·∫ßn theo d√µi
 * @param {string} channelId - ID k√™nh Discord ƒë·ªÉ g·ª≠i th√¥ng b√°o
 * @param {number} intervalMinutes - th·ªùi gian ki·ªÉm tra video m·ªõi (m·∫∑c ƒë·ªãnh 3 ph√∫t)
 */
export async function startTikTokWatcherRSS(client, username, channelId, intervalMinutes = 3) {
  console.log(`[TikTokRSS] ƒêang theo d√µi ${username} (every ${intervalMinutes}m) via RSSHub...`);

  const parser = new Parser();
  const cacheFile = "./tiktokRSSCache.json";

  // H√†m ki·ªÉm tra RSS
  async function checkRSS() {
    try {
      const feedUrl = `https://rsshub.app/tiktok/user/${username}`;
      const feed = await parser.parseURL(feedUrl);

      if (!feed.items || feed.items.length === 0) {
        console.log(`[TikTokRSS] Kh√¥ng t√¨m th·∫•y video n√†o cho ${username}.`);
        return;
      }

      const latest = feed.items[0];
      const latestId = latest.link;

      // Load cache
      let cache = {};
      if (fs.existsSync(cacheFile)) {
        cache = JSON.parse(fs.readFileSync(cacheFile, "utf8"));
      }

      // N·∫øu video ƒë√£ g·ª≠i r·ªìi th√¨ b·ªè qua
      if (cache[username] === latestId) return;

      // C·∫≠p nh·∫≠t cache
      cache[username] = latestId;
      fs.writeFileSync(cacheFile, JSON.stringify(cache, null, 2));

      // G·ª≠i th√¥ng b√°o Discord
      const channel = await client.channels.fetch(channelId);
      if (channel) {
        await channel.send({
          content: `üìπ Video m·ªõi t·ª´ **@${username}**:\n${latest.link}`
        });
        console.log(`[TikTokRSS] ƒê√£ ƒëƒÉng video m·ªõi: ${latest.link}`);
      }
    } catch (err) {
      console.error(`[TikTokRSS] L·ªói khi ki·ªÉm tra: ${err.message}`);
    }
  }

  // Ki·ªÉm tra ngay l·∫ßn ƒë·∫ßu
  await checkRSS();

  // L·∫∑p ƒë·ªãnh k·ª≥
  setInterval(checkRSS, intervalMinutes * 60 * 1000);
}
