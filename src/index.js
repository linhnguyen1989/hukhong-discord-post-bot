import {
  Client,
  GatewayIntentBits,
  Events,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ActionRowBuilder,
  InteractionType,
  EmbedBuilder
} from "discord.js";
import dotenv from "dotenv";
import { startTikTokWatcher } from "./modules/tiktokWatcher.js";

dotenv.config();

// üîπ Kh·ªüi t·∫°o bot Discord
const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages]
});

// üîπ Role ƒë∆∞·ª£c ph√©p d√πng bot (b·∫±ng ID)
const ALLOWED_ROLE_ID = "1279675797346586674";

// üîπ Khi bot s·∫µn s√†ng
client.once(Events.ClientReady, async () => {
  console.log(`‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: ${client.user.tag}`);

  // üöÄ B·∫Øt ƒë·∫ßu watcher TikTok
  // Ki·ªÉm tra t√†i kho·∫£n docdoan.vanco, g·ª≠i video m·ªõi v√†o k√™nh ID d∆∞·ªõi ƒë√¢y
  await startTikTokWatcher(client, "docdoan.vanco", "1269887001587617822");
});

// üîπ X·ª≠ l√Ω slash command v√† modal
client.on(Events.InteractionCreate, async (interaction) => {
  try {
    // --- Slash command /hukhong_post ---
    if (interaction.isChatInputCommand() && interaction.commandName === "hukhong_post") {
      if (!interaction.member.roles.cache.has(ALLOWED_ROLE_ID)) {
        await interaction.reply({
          content: "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y.",
          ephemeral: true
        });
        return;
      }

      // T·∫°o modal nh·∫≠p d·ªØ li·ªáu b√†i vi·∫øt
      const modal = new ModalBuilder()
        .setCustomId("post_modal")
        .setTitle("T·∫°o b√†i vi·∫øt m·ªõi");

      const titleInput = new TextInputBuilder()
        .setCustomId("title_input")
        .setLabel("Ti√™u ƒë·ªÅ")
        .setStyle(TextInputStyle.Short)
        .setRequired(true);

      const contentInput = new TextInputBuilder()
        .setCustomId("content_input")
        .setLabel("N·ªôi dung")
        .setStyle(TextInputStyle.Paragraph)
        .setRequired(true);

      const mainImageInput = new TextInputBuilder()
        .setCustomId("main_image_input")
        .setLabel("Link ·∫£nh b√†i vi·∫øt (t√πy ch·ªçn)")
        .setStyle(TextInputStyle.Short)
        .setRequired(false);

      const headerInput = new TextInputBuilder()
        .setCustomId("header_input")
        .setLabel("Header (t√πy ch·ªçn)")
        .setStyle(TextInputStyle.Short)
        .setRequired(false);

      const footerInput = new TextInputBuilder()
        .setCustomId("footer_input")
        .setLabel("Footer (t√πy ch·ªçn)")
        .setStyle(TextInputStyle.Short)
        .setRequired(false);

      modal.addComponents(
        new ActionRowBuilder().addComponents(titleInput),
        new ActionRowBuilder().addComponents(contentInput),
        new ActionRowBuilder().addComponents(mainImageInput),
        new ActionRowBuilder().addComponents(headerInput),
        new ActionRowBuilder().addComponents(footerInput)
      );

      await interaction.showModal(modal);
    }

    // --- Khi modal ƒë∆∞·ª£c g·ª≠i ---
    if (interaction.type === InteractionType.ModalSubmit && interaction.customId === "post_modal") {
      const title = interaction.fields.getTextInputValue("title_input");
      const content = interaction.fields.getTextInputValue("content_input");
      const mainImage = interaction.fields.getTextInputValue("main_image_input");
      const header = interaction.fields.getTextInputValue("header_input");
      const footer = interaction.fields.getTextInputValue("footer_input");

      const embed = new EmbedBuilder().setColor(0x00ae86);

      // G·ªôp header, title, content
      let desc = "";
      if (header) desc += `${header}\n\n`;
      desc += `**${title}**\n${content}`;
      embed.setDescription(desc);

      if (mainImage && mainImage.startsWith("http")) embed.setImage(mainImage);
      if (footer) embed.setFooter({ text: footer });

      await interaction.deferReply({ ephemeral: true });
      await interaction.editReply({ content: "‚úÖ B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c g·ª≠i!", ephemeral: true });
      await interaction.channel.send({ embeds: [embed] });
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi x·ª≠ l√Ω interaction:", err);
    if (interaction && !interaction.replied) {
      await interaction.reply({
        content: "‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o b√†i vi·∫øt.",
        ephemeral: true
      });
    }
  }
});

// üîπ ƒêƒÉng nh·∫≠p bot Discord
client.login(process.env.DISCORD_TOKEN);
